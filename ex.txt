/*
Функции и параметры 
при обработке большенства приложении их разделяют на функциональные модули в c# приложение состояние из классов 
которые содержит именованные блоки кода называемые методами 
метод(функции это часть класса, которая может осуществлять действия или вычеслять действие 
  
использование методом
метод - это набор операторов которое выполняется вместе для создание методов необходимо создать его имя, определить список параметров и тело методов 
для вызова метода другого класса необходимо, чтобы он был объявлен как "public'вызов осуществяется по имени класса и метода 
если метод не void, то не обходимо вернуть значение соот. типа
  
оператор return
останавливает выполнение метода и передает управление вызовшему данные оператору
  
каждый метод имеет набор своих локальных перенных они видны только в нем зовершении работы оно уничтожается для того чтоб переменная была видна
  
для не vpid методов необходимо возращать значение каждый "путь выполнения метода должен заканчиваться оператора return"
для void метод return необезателен 
  
использование параметров 
параметры поозваляют передовать инфу из одного метода другой, при объявлении метода можно задать спасиок его параметров если список пустой, то это означает
что метод не имеет не параметров
  
C# 3 ВАРИНТА передачи параметров 
по значению(
по ссылке 
необходимо указать ключивое слово ref)
выходные параметры 
  
до вызова методов необхадимо обязательно инициализировать переменные 
в C# позволяет использовать механизм передачи списка параметров изменяет длины 
для этого используют ключевое слово params
модификаторы доступа - это ключевы слова которые задают объявленые уровень приступности члена или типа
7 уровней специальных возможности модификаторов доступа 
public доступ неограничен 
protected доступ ограничен содержит классом или типами, которые являются производными от содержающего класса 
internal: доступ оганичен текущей сборкой 
protected internal 
private: доступ ограничен содержащим типом 
private protected
file: объвленный тип отображается только в текущем исходном файле 
Модификатор Abstract - указывает, что изменяемый элемент имеет отсутствующую или неполную реализацию 
Модификатор Async - позволяет указать, что метод является синхронным
Модификатор Static - можно добавить локальную функцию, используется для объявления статического члена, принадлежащго собственному типу, а не конкретному объекту 
*/